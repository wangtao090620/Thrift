/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.giphy.protocol;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FixedWidthEntity implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)1);
  private static final TField MP4_FIELD_DESC = new TField("mp4", TType.STRING, (short)2);

  private String url;
  private String mp4;

  // isset id assignments

  public FixedWidthEntity() {
  }

  public FixedWidthEntity(
    String url,
    String mp4)
  {
    this();
    this.url = url;
    this.mp4 = mp4;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FixedWidthEntity(FixedWidthEntity other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetMp4()) {
      this.mp4 = other.mp4;
    }
  }

  public FixedWidthEntity deepCopy() {
    return new FixedWidthEntity(this);
  }

  public void clear() {
    this.url = null;
    this.mp4 = null;
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getMp4() {
    return this.mp4;
  }

  public void setMp4(String mp4) {
    this.mp4 = mp4;
  }

  public void unsetMp4() {
    this.mp4 = null;
  }

  /** Returns true if field mp4 is set (has been assigned a value) and false otherwise */
  public boolean isSetMp4() {
    return this.mp4 != null;
  }

  public void setMp4IsSet(boolean value) {
    if (!value) {
      this.mp4 = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FixedWidthEntity)
      return this.equals((FixedWidthEntity)that);
    return false;
  }

  public boolean equals(FixedWidthEntity that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_mp4 = true && this.isSetMp4();
    boolean that_present_mp4 = true && that.isSetMp4();
    if (this_present_mp4 || that_present_mp4) {
      if (!(this_present_mp4 && that_present_mp4))
        return false;
      if (!this.mp4.equals(that.mp4))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    FixedWidthEntity other = (FixedWidthEntity)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUrl(), other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMp4(), other.isSetMp4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMp4()) {
      lastComparison = TBaseHelper.compareTo(this.mp4, other.mp4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // URL
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MP4
          if (field.type == TType.STRING) {
            this.mp4 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.mp4 != null) {
      oprot.writeFieldBegin(MP4_FIELD_DESC);
      oprot.writeString(this.mp4);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(URL_FIELD_DESC.name())) {
        this.url = obj.optString(URL_FIELD_DESC.name());
      }
      if (obj.has(MP4_FIELD_DESC.name())) {
        this.mp4 = obj.optString(MP4_FIELD_DESC.name());
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.url != null) {
        Object v_url = this.url;
        obj.put(URL_FIELD_DESC.name(), v_url);
      }
      if (this.mp4 != null) {
        Object v_mp4 = this.mp4;
        obj.put(MP4_FIELD_DESC.name(), v_mp4);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.giphy.protocol;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ImagesEntity implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField FIXED_WIDTH_FIELD_DESC = new TField("fixed_width", TType.STRUCT, (short)1);

  private FixedWidthEntity fixed_width;

  // isset id assignments

  public ImagesEntity() {
  }

  public ImagesEntity(
    FixedWidthEntity fixed_width)
  {
    this();
    this.fixed_width = fixed_width;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImagesEntity(ImagesEntity other) {
    if (other.isSetFixed_width()) {
      this.fixed_width = new FixedWidthEntity(other.fixed_width);
    }
  }

  public ImagesEntity deepCopy() {
    return new ImagesEntity(this);
  }

  public void clear() {
    this.fixed_width = null;
  }

  public FixedWidthEntity getFixed_width() {
    return this.fixed_width;
  }

  public void setFixed_width(FixedWidthEntity fixed_width) {
    this.fixed_width = fixed_width;
  }

  public void unsetFixed_width() {
    this.fixed_width = null;
  }

  /** Returns true if field fixed_width is set (has been assigned a value) and false otherwise */
  public boolean isSetFixed_width() {
    return this.fixed_width != null;
  }

  public void setFixed_widthIsSet(boolean value) {
    if (!value) {
      this.fixed_width = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImagesEntity)
      return this.equals((ImagesEntity)that);
    return false;
  }

  public boolean equals(ImagesEntity that) {
    if (that == null)
      return false;

    boolean this_present_fixed_width = true && this.isSetFixed_width();
    boolean that_present_fixed_width = true && that.isSetFixed_width();
    if (this_present_fixed_width || that_present_fixed_width) {
      if (!(this_present_fixed_width && that_present_fixed_width))
        return false;
      if (!this.fixed_width.equals(that.fixed_width))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ImagesEntity other = (ImagesEntity)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetFixed_width(), other.isSetFixed_width());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixed_width()) {
      lastComparison = this.fixed_width.compareTo(other.fixed_width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // FIXED_WIDTH
          if (field.type == TType.STRUCT) {
            this.fixed_width = new FixedWidthEntity();
            this.fixed_width.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.fixed_width != null) {
      oprot.writeFieldBegin(FIXED_WIDTH_FIELD_DESC);
      this.fixed_width.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(FIXED_WIDTH_FIELD_DESC.name())) {
        this.fixed_width = new FixedWidthEntity();
        this.fixed_width.read(obj.optJSONObject(FIXED_WIDTH_FIELD_DESC.name()));
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.fixed_width != null) {
        JSONObject v_fixed_width = new JSONObject();
        this.fixed_width.write(v_fixed_width);
        obj.put(FIXED_WIDTH_FIELD_DESC.name(), v_fixed_width);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.giphy.protocol;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Data implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField IMAGES_FIELD_DESC = new TField("images", TType.STRUCT, (short)1);

  private ImagesEntity images;

  // isset id assignments

  public Data() {
  }

  public Data(
    ImagesEntity images)
  {
    this();
    this.images = images;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    if (other.isSetImages()) {
      this.images = new ImagesEntity(other.images);
    }
  }

  public Data deepCopy() {
    return new Data(this);
  }

  public void clear() {
    this.images = null;
  }

  public ImagesEntity getImages() {
    return this.images;
  }

  public void setImages(ImagesEntity images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Data other = (Data)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetImages(), other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = this.images.compareTo(other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // IMAGES
          if (field.type == TType.STRUCT) {
            this.images = new ImagesEntity();
            this.images.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.images != null) {
      oprot.writeFieldBegin(IMAGES_FIELD_DESC);
      this.images.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(IMAGES_FIELD_DESC.name())) {
        this.images = new ImagesEntity();
        this.images.read(obj.optJSONObject(IMAGES_FIELD_DESC.name()));
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.images != null) {
        JSONObject v_images = new JSONObject();
        this.images.write(v_images);
        obj.put(IMAGES_FIELD_DESC.name(), v_images);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}


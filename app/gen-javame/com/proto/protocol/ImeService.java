/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.proto.protocol;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ImeService {

  public interface Iface {

    public ImageResponse loadImage(ImageRequest request) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public ImageResponse loadImage(ImageRequest request) throws TException
    {
      send_loadImage(request);
      return recv_loadImage();
    }

    public void send_loadImage(ImageRequest request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loadImage", TMessageType.CALL, ++seqid_));
      loadImage_args args = new loadImage_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ImageResponse recv_loadImage() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      // if (msg.seqid != seqid_) {
      //   throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loadImage failed: out of sequence response");
      // }
      loadImage_result result = new loadImage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loadImage failed: unknown result");
    }

  }

  public static class JsonClient implements Iface {
    protected TTransport trans_;

    public JsonClient(TTransport trans)
    {
      this.trans_ = trans;
    }

    public ImageResponse loadImage(ImageRequest request) throws TException
    {
      try {
        JSONObject objReq = new JSONObject();
        if (request != null) request.write(objReq);
        String strReq = objReq.toString();
        trans_.write(strReq.getBytes("utf-8"));
        trans_.flush();
        TByteArrayOutputStream os = new TByteArrayOutputStream(4096);
        IOUtil.readAll(trans_, os);
        String strRes = new String(os.get(), 0, os.len(), "utf-8");
        JSONObject objRes = new JSONObject(strRes);
        ImageResponse res = new ImageResponse();
        res.read(objRes);
        return res;
      } catch (Exception e) {
        throw new TException(e);
      }
    }

  }

  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("loadImage", new loadImage());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class loadImage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loadImage_args args = new loadImage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loadImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loadImage_result result = new loadImage_result();
        result.success = iface_.loadImage(args.request);
        oprot.writeMessageBegin(new TMessage("loadImage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class loadImage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    private ImageRequest request;

    // isset id assignments

    public loadImage_args() {
    }

    public loadImage_args(
      ImageRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadImage_args(loadImage_args other) {
      if (other.isSetRequest()) {
        this.request = new ImageRequest(other.request);
      }
    }

    public loadImage_args deepCopy() {
      return new loadImage_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public ImageRequest getRequest() {
      return this.request;
    }

    public void setRequest(ImageRequest request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadImage_args)
        return this.equals((loadImage_args)that);
      return false;
    }

    public boolean equals(loadImage_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loadImage_args other = (loadImage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new ImageRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public void validate() throws TException {
      // check for required fields
    }

    public void read(JSONObject obj) throws TException {
      validate();

      try {
        if (obj.has(REQUEST_FIELD_DESC.name())) {
          this.request = new ImageRequest();
          this.request.read(obj.optJSONObject(REQUEST_FIELD_DESC.name()));
        }
      } catch (Exception e) {
            throw new TException(e);
      }
    }

    public void write(JSONObject obj) throws TException {
      validate();

      try {
        if (this.request != null) {
          JSONObject v_request = new JSONObject();
          this.request.write(v_request);
          obj.put(REQUEST_FIELD_DESC.name(), v_request);
        }
      } catch (Exception e) {
            throw new TException(e);
      }
    }

  }

  public static class loadImage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private ImageResponse success;

    // isset id assignments

    public loadImage_result() {
    }

    public loadImage_result(
      ImageResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadImage_result(loadImage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImageResponse(other.success);
      }
    }

    public loadImage_result deepCopy() {
      return new loadImage_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public ImageResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(ImageResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadImage_result)
        return this.equals((loadImage_result)that);
      return false;
    }

    public boolean equals(loadImage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loadImage_result other = (loadImage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ImageResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public void validate() throws TException {
      // check for required fields
    }

    public void read(JSONObject obj) throws TException {
      validate();

      try {
        if (obj.has(SUCCESS_FIELD_DESC.name())) {
          this.success = new ImageResponse();
          this.success.read(obj.optJSONObject(SUCCESS_FIELD_DESC.name()));
        }
      } catch (Exception e) {
            throw new TException(e);
      }
    }

    public void write(JSONObject obj) throws TException {
      validate();

      try {
        if (this.success != null) {
          JSONObject v_success = new JSONObject();
          this.success.write(v_success);
          obj.put(SUCCESS_FIELD_DESC.name(), v_success);
        }
      } catch (Exception e) {
            throw new TException(e);
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.proto.protocol;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ImageResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField RESULTS_FIELD_DESC = new TField("results", TType.LIST, (short)1);

  private Vector results;

  // isset id assignments

  public ImageResponse() {
  }

  public ImageResponse(
    Vector results)
  {
    this();
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageResponse(ImageResponse other) {
    if (other.isSetResults()) {
      Vector __this__results = new Vector();
      for (Enumeration other_enum = other.results.elements(); other_enum.hasMoreElements(); ) {
        Results other_element = (Results)other_enum.nextElement();
        __this__results.addElement(new Results(other_element));
      }
      this.results = __this__results;
    }
  }

  public ImageResponse deepCopy() {
    return new ImageResponse(this);
  }

  public void clear() {
    this.results = null;
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public Enumeration getResultsEnumeration() {
    return (this.results == null) ? null : this.results.elements();
  }

  public void addToResults(Results elem) {
    if (this.results == null) {
      this.results = new Vector();
    }
    this.results.addElement(elem);
  }

  public Vector getResults() {
    return this.results;
  }

  public void setResults(Vector results) {
    this.results = results;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageResponse)
      return this.equals((ImageResponse)that);
    return false;
  }

  public boolean equals(ImageResponse that) {
    if (that == null)
      return false;

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ImageResponse other = (ImageResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetResults(), other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RESULTS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.results = new Vector(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                Results _elem2;
                _elem2 = new Results();
                _elem2.read(iprot);
                this.results.addElement(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.results != null) {
      oprot.writeFieldBegin(RESULTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.results.size()));
        for (Enumeration _iter3_enum = this.results.elements(); _iter3_enum.hasMoreElements(); )         {
          Results _iter3 = (Results)_iter3_enum.nextElement();
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(RESULTS_FIELD_DESC.name())) {
        {
          JSONArray _list4 = obj.optJSONArray(RESULTS_FIELD_DESC.name());
          this.results = new Vector(_list4.length());
          for (int _i6=0; _i6<_list4.length(); _i6++)
          {
            Results _elem9;
            _elem9 = new Results();
            _elem9.read(_list4.optJSONObject(_i6));
            this.results.addElement(_elem9);
          }
        }
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.results != null) {
        JSONArray v_results = new JSONArray();
        for (Enumeration _iter10_enum = this.results.elements(); _iter10_enum.hasMoreElements(); )         {
          Results _iter10 = (Results)_iter10_enum.nextElement();
          Results  _iter10_value = ((Results)_iter10);
          JSONObject _iter10_value_json = new JSONObject();
          _iter10_value.write(_iter10_value_json);
          v_results.put(_iter10_value_json);
        }
        obj.put(RESULTS_FIELD_DESC.name(), v_results);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

